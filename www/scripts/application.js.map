{"version":3,"file":"application.js","sourceRoot":"","sources":["../../scripts/application.ts"],"names":[],"mappings":";;IAGA,6EAA6E;IAC7E,4EAA4E;IAC5E,6EAA6E;IAC7E,mBAAmB;IACnB;QACI,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,oBAAY,CAAC,IAAI,EAAE,CAAC;QACpB,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;IAJD,gCAIC;IAED,0EAA0E;IAC1E,6DAA6D;IAC7D;QAEI,iDAAiD;QACjD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAE5B,yBAAyB;QACzB,UAAU,CAAC,oBAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEpC,0EAA0E;QAC1E,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACnD,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAErD,IAAI,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,gBAAgB,GAAG,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,eAAe,GAAG,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAC/D,gBAAgB,CAAC,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;QACxD,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QAExD,qDAAqD;QACrD,gBAAgB,EAAE,CAAC;IACvB,CAAC;IAED,8CAA8C;IAC9C;QACI,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,0EAA0E;IAC9E,CAAC;IAED,kDAAkD;IAClD;QACI,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,+EAA+E;IACnF,CAAC;IAED,2CAA2C;IAC3C;QACI,kBAAU,CAAC,iBAAiB,EAAE,CAAC;QAC/B,cAAM,CAAC,IAAI,EAAE,CAAC;QAEd,+BAA+B;QAC/B,IAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAEzD,aAAa,CAAC,SAAS,GAAG,kBAAU,CAAC,WAAW,EAAE,GAAG,MAAM,GAAG,OAAO,CAAC;QACtE,cAAc,CAAC,SAAS,GAAG,kBAAU,CAAC,yBAAyB,EAAE,CAAC;QAClE,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAA;IAC/C,CAAC","sourcesContent":["// Imports\r\nimport { splashScreen, connection, camera } from './components/index';\r\n\r\n// Called when the application is started. Here is where we load the Cordova \r\n// application components. Once all of the Cordova components are loaded, we\r\n// can then start the application by calling `onDeviceReady`, indicating the \r\n// device is ready.\r\nexport function initialize(): void {\r\n    console.log('Loading device..');\r\n    splashScreen.show();\r\n    document.addEventListener('deviceready', onDeviceReady, false);\r\n}\r\n\r\n// Loads when the device has completely loaded the app. This is similar to\r\n// the global associated with the main function in C or Java.\r\nfunction onDeviceReady(): void {\r\n\r\n    // Log that the device has been loaded correctly.\r\n    console.log('Device ready');\r\n\r\n    // Hide the splash screen\r\n    setTimeout(splashScreen.hide, 3000);\r\n\r\n    // Add event event listeners (look at onPause and onResume for more info).\r\n    document.addEventListener('pause', onPause, false);\r\n    document.addEventListener('resume', onResume, false);\r\n\r\n    var parentElement = document.getElementById('deviceready');\r\n    var listeningElement = parentElement.querySelector('.listening');\r\n    var receivedElement = parentElement.querySelector('.received');\r\n    listeningElement.setAttribute('style', 'display:none;');\r\n    receivedElement.setAttribute('style', 'display:block;');\r\n\r\n    // Reload all components (see helper function below);\r\n    reloadComponents();\r\n}\r\n\r\n// Indicates the user has left the application\r\nfunction onPause(): void {\r\n    console.log(\"The application has been paused\");\r\n    // TODO: This application has been suspended. Save application state here.\r\n}\r\n\r\n// Indicates the user has resumed the application.\r\nfunction onResume(): void {\r\n    console.log(\"The application has been resumed.\");\r\n    // TODO: This application has been reactivated. Restore application state here.\r\n}\r\n\r\n// Load the components for the application.\r\nfunction reloadComponents() {\r\n    connection.getConnectionType();\r\n    camera.load();\r\n\r\n    // Show some custom information\r\n    const connectedElem = document.getElementById('connected');\r\n    const connectionElem = document.getElementById('connection');\r\n    const platformElem = document.getElementById('platform');\r\n\r\n    connectedElem.innerText = connection.isConnected() ? \"true\" : \"false\";\r\n    connectionElem.innerText = connection.getConnectionTypeAsString();\r\n    platformElem.innerHTML = navigator.platform\r\n}"]}